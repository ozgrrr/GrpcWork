syntax = "proto3";

/*	
	As we are using C#, we have used a directive that is specific to C#
	Others:  java_package,	java_outer_classname,	go_package,		optimize_for
*/
option csharp_namespace = "IndepthProtobuf";

/*
importing other protofiles before the package directive
import "{patht to proto file}"
*/
import "google/protobuf/any.proto";
import "Protos/reference.proto";

package greet;


// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply);

  // Client-streaming RPC - allowss to send many instances of a specific message type to the server
  // while only accepting a single response message once the entire stream of request messages has been processed.
  rpc RequestManyHellos(stream HelloRequest) returns (HelloReply);

   // Server-streaming RPC - allowss to send many instances of a specific message type to the server
   // while only accepting a single response message once the entire stream of request messages has been processed.
  rpc SayManyHellos (HelloRequest) returns (stream HelloReply);

  // Bi-directional streaming RPC
  rpc RequestAndSayManyHellos (stream HelloRequest) returns (stream HelloReply);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
  BasicTypes basic_types_field = 2;
  BasicTypes.InternalEnum internal_enum_field = 3;
  ExternalEnum external_enum_field = 4;
  NestedMessage nested_message_field = 5 [deprecated = true];	//	usage of field-level option (when this field used, ide will generate a warning (this is the warning message))
  message NestedMessage {
	repeated string string_collection = 1;
	repeated int32 int_collection = 2;
	repeated BasicTypes object_collection = 3;
	repeated ExternalEnum enum_collection = 4;
	// only int and string types can be used as keys for protobuf map
	map<string, string> string_to_string_map = 5;
	map<int64, string> int_to_string_map = 6;
	map<sfixed32, BasicTypes> signedfixed_to_object_map = 7;
	map<uint64, ExternalEnum> unsignedint_to_enum_map = 8;
  }
  google.protobuf.Any external_reference_field = 6;
  greet.reference.ReferenceMessage internal_reference_field = 7;
  BasicTypes2 basic_types_2_field = 9;
}

message BasicTypes {
  int32 int_field = 1;
  int64 long_field = 2;
  uint32 unsigned_int_field = 3;
  uint64 unsigned_long_field = 4;
  sint32 signed_int_field = 5;
  sint64 signed_long_field = 6;
  fixed32 fixed_int_field = 7;
  fixed64 fixed_long_field = 8;
  sfixed32 signed_fixed_int_field = 9;
  sfixed64 signed_fixed_long_field = 10;
  float float_field = 11;
  double double_field = 12;
  bool boolean_field = 13;
  string string_field = 14;
  bytes bytes_field = 15;
  InternalEnum internal_enum_field = 16;
  ExternalEnum external_enum_field = 17;
  enum InternalEnum {
	  NONE = 0;
	  SINGLE = 1;
	  MANY = 2;
  }
}

/*	
	"oneof"" keyword demonstration
	only the last field that is set under oneof keyword will be set
	if other fields were set earlier, they will be unset.
	!!! "oneof" does not supprt collections. repeated or map fields can not be used	!!!
*/
message BasicTypes2 {
  oneof whole_number_field {
	int32 int_field = 1;
	int64 long_field = 2;
	uint32 unsigned_int_field = 3;
	uint64 unsigned_long_field = 4;
	sint32 signed_int_field = 5;
	sint64 signed_long_field = 6;
	fixed32 fixed_int_field = 7;
	fixed64 fixed_long_field = 8;
	sfixed32 signed_fixed_int_field = 9;
	sfixed64 signed_fixed_long_field = 10;
  }
  oneof mixed_fields {
	float float_field = 11;
	double double_field = 12;
	bool boolean_field = 13;
	string string_field = 14;
	bytes bytes_field = 15;
	InternalEnum internal_enum_field = 16;
	ExternalEnum external_enum_field = 17;
  }
  enum InternalEnum {
	NONE = 0;
	SINGLE = 1;
	MANY = 2;
  }
}

enum ExternalEnum {
	option allow_alias = true;
	NONE = 0;
	SINGLE = 1;
	FEW = 2;
	MANY = 2;
}